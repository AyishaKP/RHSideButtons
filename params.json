{
  "name": "RHSideButtons",
  "tagline": "Library provides easy to implement variation of Android (Material Design) Floating Action Button for iOS. You can use it as your app small side menu. 🌶",
  "body": "# RHSideButtons 🌶\r\n\r\n## Play with it 😎\r\n<iframe src=\"https://appetize.io/embed/zanve819jr7g7dmh326a924pq4?device=iphone6&scale=100&autoplay=false&orientation=portrait&deviceColor=black\" width=\"416px\" height=\"870px\" frameborder=\"0\" scrolling=\"no\"></iframe>\r\n\r\n## Usage\r\nYou just need implement `RHSideButtonsDataSource` and `RHSideButtonsDelegate` similar to well-known UIKit design.\r\n\r\n```swift\r\n// You need to firstly create trigger button. You can do this using block or your builder object which should conform to 'RHButtonViewConfigProtocol'\r\n// RHTriggerButtonView allows you to change image for pressed state! 👌🏻\r\nlet triggerButton = RHTriggerButtonView(pressedImage: UIImage(named: \"exit_icon\")!) {\r\n    $0.image = UIImage(named: \"trigger_img\")\r\n    $0.hasShadow = true\r\n}\r\n\r\n// Then you need to create instance of SideButtons coordinator class with your View Controller view (it can be even TableView)\r\nsideButtonsView = RHSideButtons(parentView: view, triggerButton: triggerButton)\r\nsideButtonsView.delegate = self\r\nsideButtonsView.dataSource = self\r\n\r\n// When SideButtons controller is initialized properly you should set thier position in view in e.g. viewWillAppear method:\r\noverride func viewWillAppear(animated: Bool) {\r\n    super.viewWillAppear(animated)\r\n\r\n    sideBttns?.setTriggerButtonPosition(CGPoint(x: bounds.width - 85, y: bounds.height - 85))\r\n}\r\n```\r\n```swift\r\n//Finally you should create array of buttons which will feed our dataSource and Delegate methods :) e.g.:\r\nlet button_1 = RHButtonView {\r\n    $0.image = UIImage(named: \"icon_1\")\r\n    $0.hasShadow = true\r\n}\r\n\r\nlet button_2 = RHButtonView {\r\n    $0.image = UIImage(named: \"icon_2\")\r\n    $0.hasShadow = true\r\n}\r\n\r\nlet button_3 = RHButtonView {\r\n    $0.image = UIImage(named: \"icon_3\")\r\n    $0.hasShadow = true\r\n}\r\n\r\nbuttonsArr.appendContentsOf([button_1, button_2, button_3])\r\n\r\n//Similar as it is in TableView, now you should reload buttons with new values\r\nsideButtonsView.reloadButtons()\r\n```\r\n\r\n### RHSideButtonsDataSource\r\n```swift\r\nfunc sideButtonsNumberOfButtons(sideButtons: RHSideButtons) -> Int\r\nfunc sideButtons(sideButtons: RHSideButtons, buttonAtIndex index: Int) -> RHButtonView\r\n```\r\n\r\n### RHSideButtonsDelegate\r\n```swift\r\nfunc sideButtons(sideButtons: RHSideButtons, didSelectButtonAtIndex index: Int)\r\nfunc sideButtons(sideButtons: RHSideButtons, didTriggerButtonChangeStateTo state: RHButtonState)\r\n```\r\n\r\n<img src =\"./Demo/RHSideButtons.gif\" width=\"360\" height=\"640\"/>\r\n\r\n## Support for left-handers :)\r\nIf you decide to position RHSideButtons on the left site of view, buttons will dissapears to the left side of screen automatically.\r\n\r\ne.g.:\r\n```swift\r\nsideBttns?.setTriggerButtonPosition(25, y: frame.size.height - 85))\r\n```\r\n\r\n<img src =\"./Demo/RHSideButtons_Left.gif\" width=\"360\" height=\"640\"/>\r\n\r\n\r\n## Check the Demo project \r\n\r\nPlease check out the demo project, you can see there what is the best (in my opinion 🤔) way to implement my buttons. Please keep in mind that Readme contains the simplest way to implement this control.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}